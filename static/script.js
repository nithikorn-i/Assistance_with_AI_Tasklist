document.addEventListener('DOMContentLoaded', () => {
  console.log("üî• ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
  
  let currentChatId = null;
  let isWaitingResponse = false;

  // DOM Elements
  const userInput = document.getElementById('user-input');
  const machineModel = document.getElementById('Machine-model');
  const sendButton = document.getElementById('send-button');
  const chatBox = document.getElementById('chat-box');
  const chatViewer = document.getElementById('chat-viewer');
  const historyMenu = document.getElementById('history-menu');
  const newChatBtn = document.getElementById('new-chat-btn');
  const historyDropdownToggle = document.querySelector('.history-dropdown > a');
  const menuToggle = document.querySelector('.menu-toggle');
  const luxurySidebar = document.querySelector('.luxury-sidebar');
  menuToggle.addEventListener('click', () => {
  luxurySidebar.classList.toggle('mobile-show');
  });
  document.addEventListener('click', (event) => {
    const isClickInsideSidebar = luxurySidebar.contains(event.target);
    const isClickOnToggle = menuToggle.contains(event.target);
    if (!isClickInsideSidebar && !isClickOnToggle) {
      luxurySidebar.classList.remove('mobile-show');
    }
  });

  async function initializeApp() {
    try {
      console.log("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...");
      disableInput(true);
      await loadAllChatHistories();
      const hasHistory = document.querySelectorAll('#history-menu li').length > 0;
      if (hasHistory) {
        const latestChatId = document.querySelector('#history-menu li').dataset.chatid;
        currentChatId = latestChatId;
        await loadChat(latestChatId);
      } else {
        await startNewChat();
      }
      historyDropdownToggle.addEventListener('click', (e) => {
      e.preventDefault();
      historyMenu.classList.toggle('show');
      });
      
      console.log("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô");
    } catch (error) {
      console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:", error);
      showError("‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + error.message);
    } finally {
      disableInput(false);
    }
  }

async function loadAllChatHistories() {
  try {
    console.log("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...");
    const res = await fetch('/get-all-chats');
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const data = await res.json();
    console.log("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:", data);
    
    const historyMenu = document.getElementById('history-menu');
    historyMenu.innerHTML = '';

    if (data.chats && data.chats.length > 0) {
      highlightHistory(currentChatId);
      data.chats.forEach(chat => {
        const li = document.createElement('li');
        li.dataset.chatid = chat.chatId;

        // üïí ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        const date = new Date(chat.lastActivity);
        const timeStr = date.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' });

        // üìù span ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó
        const span = document.createElement('span');
        span.textContent = `‡πÅ‡∏ä‡∏ó ${timeStr}`;
        span.style.cursor = 'pointer';
        span.style.flexGrow = '1';  // ‡∏î‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ã‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î

        // üóëÔ∏è ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö
        const deleteBtn = document.createElement('button');
        deleteBtn.textContent = '‚ùå';
        deleteBtn.title = '‡∏•‡∏ö‡πÅ‡∏ä‡∏ó';
        deleteBtn.style.border = 'none';
        deleteBtn.style.background = 'none';
        deleteBtn.style.color = '#999';
        deleteBtn.style.fontSize = '14px';
        deleteBtn.style.cursor = 'pointer';
        deleteBtn.style.padding = '0';
        deleteBtn.style.marginLeft = '6px';

        // üëâ ‡∏à‡∏±‡∏î layout
        li.style.display = 'flex';
        li.style.alignItems = 'center';
        li.style.gap = '6px';

        // üìå ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏ä‡∏ó
        li.addEventListener('click', () => {
          loadChat(chat.chatId);
        });

        // üóëÔ∏è ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏ö
        deleteBtn.addEventListener('click', async (e) => {
          e.stopPropagation(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ä‡∏ó
          if (confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏•‡∏ö‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ?')) {
            await deleteChat(chat.chatId);
            await loadAllChatHistories();
            clearChat();
          }
        });

        // üß± ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö li
        li.appendChild(span);
        li.appendChild(deleteBtn);
        historyMenu.appendChild(li);
      });
    } else {
      console.log("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó");
    }
  } catch (error) {
    console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
    showError("‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + error.message);
  }
}




async function startNewChat() {
  if (isWaitingResponse) {
    console.warn("‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà");
    return;
  }

  try {
    disableInput(true);
    const res = await fetch('/new-chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    if (!res.ok) throw new Error(await res.text());
    const data = await res.json();
    currentChatId = data.chatId;
    clearChat();
    addMessage("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ä‡∏ó AI Softsquare Group", "ai");
    removeActiveHistoryHighlight();
    await loadAllChatHistories();
    highlightHistory(currentChatId);
  } catch (error) {
    showError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ: " + error.message);
    throw error;
  } finally {
    disableInput(false);
  }
}


  async function sendMessage() {
  const message = userInput.value.trim();
  const machine = machineModel.value.trim();
  if (!message) return showError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°");
  if (!currentChatId) {
    await startNewChat();
    await new Promise(resolve => setTimeout(resolve, 100));
  }

  addMessage(message, 'user');
  userInput.value = '';
  disableInput(true);
  isWaitingResponse = true;

  try {
    const res = await fetch('/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        chatId: currentChatId, 
        message: message, 
        sender: 'user',
        machine: machine
      })
    });
    if (!res.ok) throw new Error(await res.text());
    const data = await res.json();

    addMessage(data.response, 'ai');
    await loadAllChatHistories();
    highlightHistory(currentChatId);
    await loadChat(currentChatId);

  } catch (error) {
    addMessage("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö AI", 'ai');
  } finally {
    isWaitingResponse = false;
    disableInput(false);
  }
}



  async function loadChat(chatId) {
    if (isWaitingResponse || !chatId) return;
    disableInput(true);
    setLoading(true);
    try {
      const res = await fetch(`/get-history/${chatId}`);
      if (!res.ok) throw new Error(await res.text());
      const data = await res.json();
      chatViewer.innerHTML = '';
      if (data.messages && data.messages.length > 0) {
        data.messages.forEach(msg => {
          const div = document.createElement('div');
          div.className = `message ${msg.sender}-message`;
          div.innerHTML = `<div class="message-content">${msg.text}</div>`;
          chatViewer.appendChild(div);
        });
      } else {
        chatViewer.innerHTML = '<div class="no-messages">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ô‡∏µ‡πâ</div>';
      }
      chatBox.style.display = 'none';
      chatViewer.style.display = 'flex';
      currentChatId = chatId;
      highlightHistory(chatId);
    } catch (error) {
      chatViewer.innerHTML = `<div class="error">‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error.message}</div>`;
    } finally {
      setLoading(false);
      disableInput(false);
    }
  }

async function deleteChat(chatId) {
  setLoading(true); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏´‡∏•‡∏î

  try {
    const res = await fetch(`/delete-chat/${chatId}`, {
      method: 'DELETE',
    });

    if (!res.ok) {
      const errorText = await res.text();
      throw new Error(`‡∏•‡∏ö‡πÅ‡∏ä‡∏ó‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${errorText}`);
    }

    console.log(`‚úÖ ‡∏•‡∏ö‡πÅ‡∏ä‡∏ó ${chatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
  } catch (error) {
    console.error(error);
    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ä‡∏ó: ' + error.message);
  } finally {
    setLoading(false); // ‚úÖ ‡∏ã‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î
  }
}



  // ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
function addMessage(text, sender) {
  const targetContainer = (chatViewer.style.display === 'flex') ? chatViewer : chatBox;
  const div = document.createElement('div');
  div.className = `message ${sender}-message`;

  const messageContent = document.createElement('div');
  messageContent.className = 'message-content';

  const messageText = document.createElement('p');
  messageText.className = 'message-text';
  messageContent.appendChild(messageText);
  div.appendChild(messageContent);
  targetContainer.appendChild(div);
  targetContainer.scrollTop = targetContainer.scrollHeight;

  if (sender === 'ai') {
    // üëâ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ‡∏û‡∏¥‡∏°‡∏û‡πå
    let i = 0;
    const typingSpeed = 20; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå (ms ‡∏ï‡πà‡∏≠ 1 ‡∏ï‡∏±‡∏ß)
    const typeInterval = setInterval(() => {
      if (i < text.length) {
        messageText.textContent += text.charAt(i);
        i++;
        targetContainer.scrollTop = targetContainer.scrollHeight;
      } else {
        clearInterval(typeInterval);
      }
    }, typingSpeed);
  } else {
    // üßë‚Äçü¶∞ ‡∏ù‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    messageText.textContent = text;
  }
}



  function clearChat() {
    chatBox.innerHTML = '';
    chatBox.style.display = 'flex';
    chatViewer.style.display = 'none';
  }

  function disableInput(disabled) {
    userInput.disabled = disabled;
    sendButton.disabled = disabled;
    sendButton.innerHTML = disabled 
      ? '<i class="fas fa-spinner fa-spin"></i>' 
      : '<i class="fas fa-paper-plane"></i>';
  }

  function showError(message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.textContent = message;
    chatBox.appendChild(errorDiv);
    setTimeout(() => errorDiv.remove(), 3000);
  }

  function highlightHistory(chatId) {
  document.querySelectorAll('#history-menu li span').forEach(span => {
    span.classList.toggle('active', span.parentElement.dataset.chatid === chatId);
  });
}

  function removeActiveHistoryHighlight() {
    document.querySelectorAll('#history-menu span').forEach(span => {
      span.classList.remove('active');
    });
  }

function setLoading(isLoading) {
  if (isLoading) {
    chatViewer.innerHTML = `
      <div class="loading-container">
        <i class="fa fa-spinner fa-spin fa-2x"></i>
        <div>Processing...</div>
      </div>
    `;
  } else {
    // ‡πÑ‡∏°‡πà‡∏•‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏µ‡∏Å ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏∑‡πà‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
  }
}

  sendButton.addEventListener('click', sendMessage);
  userInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !isWaitingResponse) sendMessage();
  });
  newChatBtn.addEventListener('click', startNewChat);

  console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô...");
  initializeApp().catch(error => {
    console.error("üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á:", error);
    showError("‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á: " + error.message);
  });
});
